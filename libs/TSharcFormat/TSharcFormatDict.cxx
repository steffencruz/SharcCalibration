//
// File generated by rootcint at Fri Dec 12 14:44:01 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME TSharcFormatDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TSharcFormatDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TSharcFormat_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TSharcFormat(void *p);
   static void deleteArray_TSharcFormat(void *p);
   static void destruct_TSharcFormat(void *p);
   static void streamer_TSharcFormat(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSharcFormat*)
   {
      ::TSharcFormat *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSharcFormat >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSharcFormat", ::TSharcFormat::Class_Version(), "/home/bender/Programs/SharcCalibration/include/TSharcFormat.h", 12,
                  typeid(::TSharcFormat), DefineBehavior(ptr, ptr),
                  &::TSharcFormat::Dictionary, isa_proxy, 0,
                  sizeof(::TSharcFormat) );
      instance.SetDelete(&delete_TSharcFormat);
      instance.SetDeleteArray(&deleteArray_TSharcFormat);
      instance.SetDestructor(&destruct_TSharcFormat);
      instance.SetStreamerFunc(&streamer_TSharcFormat);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSharcFormat*)
   {
      return GenerateInitInstanceLocal((::TSharcFormat*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSharcFormat*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
atomic_TClass_ptr TSharcFormat::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TSharcFormat::Class_Name()
{
   return "TSharcFormat";
}

//______________________________________________________________________________
const char *TSharcFormat::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSharcFormat*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSharcFormat::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSharcFormat*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSharcFormat::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSharcFormat*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSharcFormat::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSharcFormat*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void TSharcFormat::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSharcFormat.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TSharcFormat::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSharcFormat.
      TClass *R__cl = ::TSharcFormat::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TSharcFormat(void *p) {
      delete ((::TSharcFormat*)p);
   }
   static void deleteArray_TSharcFormat(void *p) {
      delete [] ((::TSharcFormat*)p);
   }
   static void destruct_TSharcFormat(void *p) {
      typedef ::TSharcFormat current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TSharcFormat(TBuffer &buf, void *obj) {
      ((::TSharcFormat*)obj)->::TSharcFormat::Streamer(buf);
   }
} // end of namespace ROOT for class ::TSharcFormat

/********************************************************
* TSharcFormatDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTSharcFormatDict();

extern "C" void G__set_cpp_environmentTSharcFormatDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/home/bender/Programs/SharcCalibration/include/TSharcFormat.h");
  G__cpp_reset_tagtableTSharcFormatDict();
}
#include <new>
extern "C" int G__cpp_dllrevTSharcFormatDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TSharcFormat */
static int G__TSharcFormatDict_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSharcFormat::Get());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TSharcFormat*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TSharcFormat*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetChgMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetChgMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetChgMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetChgMatName((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetChgMatName());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCentMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCentMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCentMatName((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCentMatName());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCentChiMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCentChiMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCentChiMatName((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCentChiMatName());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCalcMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCalcMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCalcMatName((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCalcMatName());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetChgSpecName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetChgSpecName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetChgSpecName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetChgSpecName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetChgSpecName((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetChgSpecName());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCalGraphName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCalGraphName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCalGraphName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCalGraphName((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetCalGraphName());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetMulGraphName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetMulGraphName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetMulGraphName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetMulGraphName((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetMulGraphName());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetKinMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetKinMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetKinMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetKinMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetKinMatName((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetKinMatName());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetResMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetResMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetResMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetResMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetResMatName((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetResMatName());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetExcMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetExcMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetExcMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetExcMatName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetExcMatName((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetExcMatName());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetListName((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetListName((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetListName((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetListName());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetFitInfoName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetFitInfoName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetFitInfoName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetFitInfoName((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetFitInfoName((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((TSharcFormat*) G__getstructoffset())->GetFitInfoName());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((TSharcFormat*) G__getstructoffset())->CreateObject((const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((TSharcFormat*) G__getstructoffset())->CreateObject((const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSharcFormat::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSharcFormat::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSharcFormat::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSharcFormat::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSharcFormat*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSharcFormat::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSharcFormat::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSharcFormat::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSharcFormatDict_168_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSharcFormat::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TSharcFormatDict_168_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSharcFormat* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSharcFormat(*(TSharcFormat*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TSharcFormatDictLN_TSharcFormat));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSharcFormat G__TTSharcFormat;
static int G__TSharcFormatDict_168_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSharcFormat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSharcFormat*) (soff+(sizeof(TSharcFormat)*i)))->~G__TTSharcFormat();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSharcFormat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSharcFormat*) (soff))->~G__TTSharcFormat();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TSharcFormatDict_168_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSharcFormat* dest = (TSharcFormat*) G__getstructoffset();
   *dest = *(TSharcFormat*) libp->para[0].ref;
   const TSharcFormat& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TSharcFormat */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTSharcFormatDict {
 public:
  G__Sizep2memfuncTSharcFormatDict(): p(&G__Sizep2memfuncTSharcFormatDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTSharcFormatDict::*p)();
};

size_t G__get_sizep2memfuncTSharcFormatDict()
{
  G__Sizep2memfuncTSharcFormatDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTSharcFormatDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TSharcFormatDictLN_TSharcFormat))) {
     TSharcFormat *G__Lderived;
     G__Lderived=(TSharcFormat*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TSharcFormatDictLN_TSharcFormat),G__get_linked_tagnum(&G__TSharcFormatDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTSharcFormatDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TSharcFormatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TSharcFormatDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TSharcFormatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TSharcFormatDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TSharcFormatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__TSharcFormatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TSharcFormatDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TSharcFormatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TSharcFormatDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TSharcFormatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TSharcFormat */
static void G__setup_memvarTSharcFormat(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TSharcFormatDictLN_TSharcFormat));
   { TSharcFormat *p; p=(TSharcFormat*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TSharcFormatDictLN_TSharcFormat),-1,-2,4,"fSharcFormat=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__TSharcFormatDictLN_string),-1,-2,4,"fChgMatName=",0,"[TH2F] Charge vs BackStrip    [p+d+c],[a]");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__TSharcFormatDictLN_string),-1,-2,4,"fChgSpecName=",0,"[TH1D] Charge                 [p+d+c],[a]");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__TSharcFormatDictLN_string),-1,-2,4,"fCentMatName=",0,"[TH2F] Centroid               [p+d+c],[a]");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__TSharcFormatDictLN_string),-1,-2,4,"fCentChiMatName=",0,"[TH2F] Centroid chi squared   [p+d+c],[a]");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__TSharcFormatDictLN_string),-1,-2,4,"fCalcMatName=",0,"[TH2F] Calculated energy      [p+d+c],[a]");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__TSharcFormatDictLN_string),-1,-2,4,"fCalGraphName=",0,"[TGE]  Energy vs Charge       [p+d+a]");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__TSharcFormatDictLN_string),-1,-2,4,"fMulGraphName=",0,"[TGE]  Energy vs Charge       [p+d+a]");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__TSharcFormatDictLN_string),-1,-2,4,"fKinMatName=",0,"[TH2F] Energy vs ThetaLab     [p],[d]");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__TSharcFormatDictLN_string),-1,-2,4,"fResMatName=",0,"[TH2F] Energy-Kin vs ThetaLab [p],[d]");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__TSharcFormatDictLN_string),-1,-2,4,"fExcMatName=",0,"[TH2F] Excitation vs ThetaLab [p],[d]");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__TSharcFormatDictLN_string),-1,-2,4,"fExcSpecName=",0,"[TH1D] Excitation             [p],[d]");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__TSharcFormatDictLN_string),-1,-2,4,"fFitInfoName=",0,"[TFitInfo] contaier for fit results");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TSharcFormatDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTSharcFormatDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTSharcFormat(void) {
   /* TSharcFormat */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TSharcFormatDictLN_TSharcFormat));
   G__memfunc_setup("Get",288,G__TSharcFormatDict_168_0_1, 85, G__get_linked_tagnum(&G__TSharcFormatDictLN_TSharcFormat), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TSharcFormat* (*)())(&TSharcFormat::Get) ), 0);
   G__memfunc_setup("Print",525,G__TSharcFormatDict_168_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetChgMatName",1237,G__TSharcFormatDict_168_0_4, 67, -1, -1, 0, 4, 1, 1, 1, 
"C - - 10 '\"\"' ion g - 'Bool_t' 0 'false' path "
"i - 'Int_t' 0 '-1' det i - 'Int_t' 0 '-1' fs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCentMatName",1357,G__TSharcFormatDict_168_0_5, 67, -1, -1, 0, 3, 1, 1, 1, 
"C - - 10 '\"\"' ion g - 'Bool_t' 0 'false' path "
"i - 'Int_t' 0 '-1' det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCentChiMatName",1633,G__TSharcFormatDict_168_0_6, 67, -1, -1, 0, 3, 1, 1, 1, 
"C - - 10 '\"\"' ion g - 'Bool_t' 0 'false' path "
"i - 'Int_t' 0 '-1' det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalcMatName",1334,G__TSharcFormatDict_168_0_7, 67, -1, -1, 0, 3, 1, 1, 1, 
"C - - 10 '\"\"' ion g - 'Bool_t' 0 'false' path "
"i - 'Int_t' 0 '-1' det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChgSpecName",1342,G__TSharcFormatDict_168_0_8, 67, -1, -1, 0, 5, 1, 1, 1, 
"C - - 10 '\"\"' ion g - 'Bool_t' 0 'false' path "
"i - 'Int_t' 0 '-1' det i - 'Int_t' 0 '-1' fs "
"i - 'Int_t' 0 '-1' bs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalGraphName",1443,G__TSharcFormatDict_168_0_9, 67, -1, -1, 0, 4, 1, 1, 1, 
"C - - 10 '\"\"' ion g - 'Bool_t' 0 'false' path "
"i - 'Int_t' 0 '-1' det i - 'Int_t' 0 '-1' fs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMulGraphName",1473,G__TSharcFormatDict_168_0_10, 67, -1, -1, 0, 4, 1, 1, 1, 
"C - - 10 '\"\"' ion g - 'Bool_t' 0 'false' path "
"i - 'Int_t' 0 '-1' det i - 'Int_t' 0 '-1' fs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKinMatName",1253,G__TSharcFormatDict_168_0_11, 67, -1, -1, 0, 5, 1, 1, 1, 
"C - - 10 '\"\"' ion g - 'Bool_t' 0 'false' path "
"i - 'Int_t' 0 '-1' det i - 'Int_t' 0 '-1' fs "
"i - 'Int_t' 0 '-1' bs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResMatName",1261,G__TSharcFormatDict_168_0_12, 67, -1, -1, 0, 5, 1, 1, 1, 
"C - - 10 '\"\"' ion g - 'Bool_t' 0 'false' path "
"i - 'Int_t' 0 '-1' det i - 'Int_t' 0 '-1' fs "
"i - 'Int_t' 0 '-1' bs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExcMatName",1251,G__TSharcFormatDict_168_0_13, 67, -1, -1, 0, 5, 1, 1, 1, 
"C - - 10 '\"\"' ion g - 'Bool_t' 0 'false' path "
"i - 'Int_t' 0 '-1' det i - 'Int_t' 0 '-1' fs "
"i - 'Int_t' 0 '-1' bs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListName",1085,G__TSharcFormatDict_168_0_14, 67, -1, -1, 0, 3, 1, 1, 1, 
"i - 'Int_t' 0 '-1' det i - 'Int_t' 0 '-1' fs "
"i - 'Int_t' 0 '-1' bs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFitInfoName",1360,G__TSharcFormatDict_168_0_15, 67, -1, -1, 0, 5, 1, 1, 1, 
"C - - 10 '\"\"' ion g - 'Bool_t' 0 'false' path "
"i - 'Int_t' 0 '-1' det i - 'Int_t' 0 '-1' fs "
"i - 'Int_t' 0 '-1' bs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateObject",1195,G__TSharcFormatDict_168_0_16, 85, G__get_linked_tagnum(&G__TSharcFormatDictLN_TObject), -1, 0, 4, 1, 1, 0, 
"C - - 10 - objtype C - 'Option_t' 10 - opt "
"h - 'UInt_t' 0 - DET i - 'Int_t' 0 '-1' FS", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TSharcFormat",1198,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__TSharcFormatDictLN_TSharcFormat), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObjectName",1272,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 6, 1, 4, 1, 
"C - - 10 - objname C - - 10 - ion "
"g - 'Bool_t' 0 - path i - 'Int_t' 0 - DET "
"i - 'Int_t' 0 '-1' FS i - 'Int_t' 0 '-1' BS", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TSharcFormatDict_168_0_19, 85, G__get_linked_tagnum(&G__TSharcFormatDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSharcFormat::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TSharcFormatDict_168_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSharcFormat::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TSharcFormatDict_168_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSharcFormat::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TSharcFormatDict_168_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSharcFormat::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TSharcFormatDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TSharcFormatDict_168_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TSharcFormatDict_168_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSharcFormat::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TSharcFormatDict_168_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSharcFormat::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TSharcFormatDict_168_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSharcFormat::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TSharcFormatDict_168_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSharcFormat::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSharcFormat", 1198, G__TSharcFormatDict_168_0_31, (int) ('i'), G__get_linked_tagnum(&G__TSharcFormatDictLN_TSharcFormat), -1, 0, 1, 1, 1, 0, "u 'TSharcFormat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSharcFormat", 1324, G__TSharcFormatDict_168_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TSharcFormatDict_168_0_33, (int) ('u'), G__get_linked_tagnum(&G__TSharcFormatDictLN_TSharcFormat), -1, 1, 1, 1, 1, 0, "u 'TSharcFormat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTSharcFormatDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTSharcFormatDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTSharcFormatDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TSharcFormatDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TSharcFormatDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TSharcFormatDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TSharcFormatDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TSharcFormatDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__TSharcFormatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TSharcFormatDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TSharcFormatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__TSharcFormatDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TSharcFormatDictLN_TSharcFormat = { "TSharcFormat" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTSharcFormatDict() {
  G__TSharcFormatDictLN_TClass.tagnum = -1 ;
  G__TSharcFormatDictLN_TBuffer.tagnum = -1 ;
  G__TSharcFormatDictLN_TMemberInspector.tagnum = -1 ;
  G__TSharcFormatDictLN_TObject.tagnum = -1 ;
  G__TSharcFormatDictLN_string.tagnum = -1 ;
  G__TSharcFormatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TSharcFormatDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TSharcFormatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__TSharcFormatDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TSharcFormatDictLN_TSharcFormat.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTSharcFormatDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TSharcFormatDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TSharcFormatDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TSharcFormatDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TSharcFormatDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__TSharcFormatDictLN_string);
   G__get_linked_tagnum_fwd(&G__TSharcFormatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TSharcFormatDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TSharcFormatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TSharcFormatDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TSharcFormatDictLN_TSharcFormat),sizeof(TSharcFormat),-1,29952,(char*)NULL,G__setup_memvarTSharcFormat,G__setup_memfuncTSharcFormat);
}
extern "C" void G__cpp_setupTSharcFormatDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTSharcFormatDict()");
  G__set_cpp_environmentTSharcFormatDict();
  G__cpp_setup_tagtableTSharcFormatDict();

  G__cpp_setup_inheritanceTSharcFormatDict();

  G__cpp_setup_typetableTSharcFormatDict();

  G__cpp_setup_memvarTSharcFormatDict();

  G__cpp_setup_memfuncTSharcFormatDict();
  G__cpp_setup_globalTSharcFormatDict();
  G__cpp_setup_funcTSharcFormatDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTSharcFormatDict();
  return;
}
class G__cpp_setup_initTSharcFormatDict {
  public:
    G__cpp_setup_initTSharcFormatDict() { G__add_setup_func("TSharcFormatDict",(G__incsetup)(&G__cpp_setupTSharcFormatDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTSharcFormatDict() { G__remove_setup_func("TSharcFormatDict"); }
};
G__cpp_setup_initTSharcFormatDict G__cpp_setup_initializerTSharcFormatDict;

